// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhiZoneApi.Data;

#nullable disable

namespace PhiZoneApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240119173639_EventTeamUpdate")]
    partial class EventTeamUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChapterSong", b =>
                {
                    b.Property<Guid>("ChaptersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChaptersId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("ChapterSong");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("PhiZoneApi.Models.Admission", b =>
                {
                    b.Property<Guid>("AdmitterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdmitteeId")
                        .HasColumnType("uuid");

                    b.Property<int>("AdmitterType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int>("RequesteeId")
                        .HasColumnType("integer");

                    b.Property<int>("RequesterId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("AdmitterId", "AdmitteeId");

                    b.HasIndex("AdmitteeId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("RequesteeId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("SongId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Authorship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Authorships");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Collaboration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InviteeId")
                        .HasColumnType("integer");

                    b.Property<int>("InviterId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubmissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InviteeId");

                    b.HasIndex("InviterId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Collaborations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateExecuted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("EventTasks");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Participation", b =>
                {
                    b.Property<Guid>("EventTeamId")
                        .HasColumnType("uuid");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("EventTeamId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PetAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Answer3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("AssessorId")
                        .HasColumnType("integer");

                    b.Property<string>("Chart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ObjectiveScore")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("Question1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Question2")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Question3")
                        .HasColumnType("uuid");

                    b.Property<int?>("SubjectiveScore")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssessorId");

                    b.HasIndex("OwnerId");

                    b.ToTable("PetAnswers");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PetChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("PetChoices");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PetQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PetQuestions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("PhiZoneApi.Models.ResourceRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CopyrightOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<int>("EditionType")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Strategy")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ResourceRecords");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("PhiZoneApi.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PhiZoneApi.Models.TapUserRelation", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UnionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ApplicationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TapUserRelations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateJoined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastLoggedIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateLastModifiedUserName")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<double>("Rks")
                        .HasColumnType("double precision");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RegionId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("PhiZoneApi.Models.UserRelation", b =>
                {
                    b.Property<int>("FolloweeId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("FolloweeId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("UserRelations");
                });

            modelBuilder.Entity("PublicResourceTag", b =>
                {
                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("ResourcesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PublicResourceTag");
                });

            modelBuilder.Entity("PhiZoneApi.Models.ChartAsset", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasIndex("ChartId");

                    b.ToTable("ChartAssets");
                });

            modelBuilder.Entity("PhiZoneApi.Models.ChartAssetSubmission", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<Guid>("ChartSubmissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RepresentationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasIndex("ChartSubmissionId");

                    b.HasIndex("RepresentationId");

                    b.ToTable("ChartAssetSubmissions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Like", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasIndex("ResourceId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("PhiZoneApi.Models.LikeableResource", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("PhiZoneApi.Models.Notification", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DateRead")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OperatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasIndex("OperatorId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PlayConfiguration", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<List<int>>("AspectRatio")
                        .HasColumnType("integer[]");

                    b.Property<double>("BackgroundBlur")
                        .HasColumnType("double precision");

                    b.Property<double>("BackgroundLuminance")
                        .HasColumnType("double precision");

                    b.Property<int>("ChartMirroring")
                        .HasColumnType("integer");

                    b.Property<int>("ChartOffset")
                        .HasColumnType("integer");

                    b.Property<bool>("FcApIndicator")
                        .HasColumnType("boolean");

                    b.Property<int>("GoodJudgment")
                        .HasColumnType("integer");

                    b.Property<double>("HitSoundVolume")
                        .HasColumnType("double precision");

                    b.Property<double>("MusicVolume")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("NoteSize")
                        .HasColumnType("double precision");

                    b.Property<int>("PerfectJudgment")
                        .HasColumnType("integer");

                    b.Property<bool>("SimultaneousNoteHint")
                        .HasColumnType("boolean");

                    b.ToTable("PlayConfigurations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Submission", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<int>("Accessibility")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("RepresentationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasIndex("RepresentationId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("PhiZoneApi.Models.VolunteerVote", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.HasIndex("ChartId");

                    b.ToTable("VolunteerVotes");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Vote", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Resource");

                    b.Property<int>("Arrangement")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Concord")
                        .HasColumnType("integer");

                    b.Property<int>("Creativity")
                        .HasColumnType("integer");

                    b.Property<int>("Gameplay")
                        .HasColumnType("integer");

                    b.Property<int>("Impression")
                        .HasColumnType("integer");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double precision");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.Property<int>("VisualEffects")
                        .HasColumnType("integer");

                    b.HasIndex("ChartId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Announcement", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid");

                    b.Property<int>("ResourceType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ResourceId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Application", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<string>("ApiEndpoint")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Homepage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<string>("TapClientId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Comment", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid");

                    b.HasIndex("ResourceId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventTeam", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<int?>("ClaimedParticipantCount")
                        .HasColumnType("integer");

                    b.Property<int?>("ClaimedSubmissionCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasIndex("DivisionId");

                    b.ToTable("EventTeams");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PublicResource", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<int>("Accessibility")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("PhiZoneApi.Models.Record", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<double>("Accuracy")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Bad")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChartId")
                        .HasColumnType("uuid");

                    b.Property<int>("GoodEarly")
                        .HasColumnType("integer");

                    b.Property<int>("GoodJudgment")
                        .HasColumnType("integer");

                    b.Property<int>("GoodLate")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFullCombo")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("integer");

                    b.Property<int>("Miss")
                        .HasColumnType("integer");

                    b.Property<int>("Perfect")
                        .HasColumnType("integer");

                    b.Property<int>("PerfectJudgment")
                        .HasColumnType("integer");

                    b.Property<double>("Rks")
                        .HasColumnType("double precision");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<double>("StdDeviation")
                        .HasColumnType("double precision");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ChartId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Reply", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.LikeableResource");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CommentId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("PhiZoneApi.Models.ChartSubmission", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Submission");

                    b.Property<int>("AdmissionStatus")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Difficulty")
                        .HasColumnType("double precision");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("FileChecksum")
                        .HasColumnType("text");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Illustration")
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .HasColumnType("text");

                    b.Property<bool>("IsRanked")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LevelType")
                        .HasColumnType("integer");

                    b.Property<int>("NoteCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SongId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SongSubmissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("VolunteerStatus")
                        .HasColumnType("integer");

                    b.HasIndex("SongId");

                    b.HasIndex("SongSubmissionId");

                    b.ToTable("ChartSubmissions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.SongSubmission", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.Submission");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Bpm")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<int>("EditionType")
                        .HasColumnType("integer");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("FileChecksum")
                        .HasColumnType("text");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("License")
                        .HasColumnType("text");

                    b.Property<string>("Lyrics")
                        .HasColumnType("text");

                    b.Property<double>("MaxBpm")
                        .HasColumnType("double precision");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<double>("MinBpm")
                        .HasColumnType("double precision");

                    b.Property<int>("Offset")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalityProof")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("PreviewEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("PreviewStart")
                        .HasColumnType("interval");

                    b.Property<int?>("ReviewerId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ReviewerId");

                    b.ToTable("SongSubmissions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Chapter", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.PublicResource");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Chart", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.PublicResource");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<double>("Difficulty")
                        .HasColumnType("double precision");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("FileChecksum")
                        .HasColumnType("text");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("Illustration")
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .HasColumnType("text");

                    b.Property<bool>("IsRanked")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LevelType")
                        .HasColumnType("integer");

                    b.Property<int>("NoteCount")
                        .HasColumnType("integer");

                    b.Property<int>("PlayCount")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingOnArrangement")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingOnConcord")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingOnCreativity")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingOnGameplay")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingOnImpression")
                        .HasColumnType("double precision");

                    b.Property<double>("RatingOnVisualEffects")
                        .HasColumnType("double precision");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasIndex("CollectionId");

                    b.HasIndex("SongId");

                    b.ToTable("Charts");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Collection", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.PublicResource");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Event", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.PublicResource");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventDivision", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.PublicResource");

                    b.Property<DateTimeOffset>("DatePublicized")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Illustration")
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .HasColumnType("text");

                    b.Property<int?>("MaxParticipantPerTeamCount")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxSubmissionCount")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxTeamCount")
                        .HasColumnType("integer");

                    b.Property<int?>("MinParticipantPerTeamCount")
                        .HasColumnType("integer");

                    b.Property<int?>("MinSubmissionCount")
                        .HasColumnType("integer");

                    b.Property<int?>("MinTeamCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subtitle")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasIndex("EventId");

                    b.ToTable("EventDivisions");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Song", b =>
                {
                    b.HasBaseType("PhiZoneApi.Models.PublicResource");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Bpm")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Edition")
                        .HasColumnType("text");

                    b.Property<int>("EditionType")
                        .HasColumnType("integer");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<string>("FileChecksum")
                        .HasColumnType("text");

                    b.Property<string>("Illustration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Illustrator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOriginal")
                        .HasColumnType("boolean");

                    b.Property<string>("License")
                        .HasColumnType("text");

                    b.Property<string>("Lyrics")
                        .HasColumnType("text");

                    b.Property<double>("MaxBpm")
                        .HasColumnType("double precision");

                    b.Property<double>("MinBpm")
                        .HasColumnType("double precision");

                    b.Property<int>("Offset")
                        .HasColumnType("integer");

                    b.Property<int>("PlayCount")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("PreviewEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("PreviewStart")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("ChapterSong", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Chapter", null)
                        .WithMany()
                        .HasForeignKey("ChaptersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Admission", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Resource", "Admittee")
                        .WithMany()
                        .HasForeignKey("AdmitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Resource", "Admitter")
                        .WithMany()
                        .HasForeignKey("AdmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Chapter", null)
                        .WithMany("SongAdmittees")
                        .HasForeignKey("ChapterId");

                    b.HasOne("PhiZoneApi.Models.Collection", null)
                        .WithMany("ChartAdmittees")
                        .HasForeignKey("CollectionId");

                    b.HasOne("PhiZoneApi.Models.User", "Requestee")
                        .WithMany()
                        .HasForeignKey("RequesteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Song", null)
                        .WithMany("ChapterAdmitters")
                        .HasForeignKey("SongId");

                    b.Navigation("Admittee");

                    b.Navigation("Admitter");

                    b.Navigation("Requestee");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Authorship", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.PublicResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Collaboration", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventTask", b =>
                {
                    b.HasOne("PhiZoneApi.Models.EventDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Participation", b =>
                {
                    b.HasOne("PhiZoneApi.Models.EventTeam", "EventTeam")
                        .WithMany("Participations")
                        .HasForeignKey("EventTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.User", "Participant")
                        .WithMany("Participations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTeam");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PetAnswer", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Assessor")
                        .WithMany()
                        .HasForeignKey("AssessorId");

                    b.HasOne("PhiZoneApi.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessor");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PhiZoneApi.Models.PetChoice", b =>
                {
                    b.HasOne("PhiZoneApi.Models.PetQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Resource", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PhiZoneApi.Models.TapUserRelation", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Application", "Application")
                        .WithMany("TapUserRelations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.User", "User")
                        .WithMany("TapUserRelations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhiZoneApi.Models.User", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PhiZoneApi.Models.UserRelation", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Followee")
                        .WithMany("FollowerRelations")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.User", "Follower")
                        .WithMany("FolloweeRelations")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("PublicResourceTag", b =>
                {
                    b.HasOne("PhiZoneApi.Models.PublicResource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhiZoneApi.Models.ChartAsset", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Chart", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("PhiZoneApi.Models.ChartAssetSubmission", b =>
                {
                    b.HasOne("PhiZoneApi.Models.ChartSubmission", "ChartSubmission")
                        .WithMany()
                        .HasForeignKey("ChartSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.ChartAsset", "Representation")
                        .WithMany()
                        .HasForeignKey("RepresentationId");

                    b.Navigation("ChartSubmission");

                    b.Navigation("Representation");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Like", b =>
                {
                    b.HasOne("PhiZoneApi.Models.LikeableResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Notification", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Submission", b =>
                {
                    b.HasOne("PhiZoneApi.Models.PublicResource", "Representation")
                        .WithMany()
                        .HasForeignKey("RepresentationId");

                    b.Navigation("Representation");
                });

            modelBuilder.Entity("PhiZoneApi.Models.VolunteerVote", b =>
                {
                    b.HasOne("PhiZoneApi.Models.ChartSubmission", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Vote", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Chart", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Announcement", b =>
                {
                    b.HasOne("PhiZoneApi.Models.PublicResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Comment", b =>
                {
                    b.HasOne("PhiZoneApi.Models.LikeableResource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventTeam", b =>
                {
                    b.HasOne("PhiZoneApi.Models.EventDivision", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Record", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhiZoneApi.Models.Chart", "Chart")
                        .WithMany()
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Reply", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("PhiZoneApi.Models.ChartSubmission", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId");

                    b.HasOne("PhiZoneApi.Models.SongSubmission", "SongSubmission")
                        .WithMany()
                        .HasForeignKey("SongSubmissionId");

                    b.Navigation("Song");

                    b.Navigation("SongSubmission");
                });

            modelBuilder.Entity("PhiZoneApi.Models.SongSubmission", b =>
                {
                    b.HasOne("PhiZoneApi.Models.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Chart", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Collection", null)
                        .WithMany("Charts")
                        .HasForeignKey("CollectionId");

                    b.HasOne("PhiZoneApi.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventDivision", b =>
                {
                    b.HasOne("PhiZoneApi.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("PhiZoneApi.Models.User", b =>
                {
                    b.Navigation("FolloweeRelations");

                    b.Navigation("FollowerRelations");

                    b.Navigation("Participations");

                    b.Navigation("TapUserRelations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Application", b =>
                {
                    b.Navigation("TapUserRelations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.EventTeam", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Chapter", b =>
                {
                    b.Navigation("SongAdmittees");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Collection", b =>
                {
                    b.Navigation("ChartAdmittees");

                    b.Navigation("Charts");
                });

            modelBuilder.Entity("PhiZoneApi.Models.Song", b =>
                {
                    b.Navigation("ChapterAdmitters");
                });
#pragma warning restore 612, 618
        }
    }
}
